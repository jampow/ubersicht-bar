#!/usr/bin/env python

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.
import struct
import sys
import os

# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.
    sys.stdout.write(struct.pack('I', len(message)))

    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func():
    while 1:
        # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.read(4)
        if len(text_length_bytes) == 0:
          sys.exit(0)

        # Unpack message length as 4 byte integer.
        text_length = struct.unpack('i', text_length_bytes)[0]

        # Read the text (JSON object) of the message.
        text = sys.stdin.read(text_length).decode('utf-8')

        path =  '/'.join(sys.argv[0].split('/')[0:-1])
        filename = path + "/playing/browser"
        try:
            os.remove(filename)
        except OSError:
            pass
        f = os.open(filename, os.O_CREAT | os.O_WRONLY | os.O_NONBLOCK)
        os.write(f, text)
        os.close(f)

        # In headless mode just send an echo message back.
        send_message('{"echo test": %s}' % text)

def Main():
    read_thread_func()
    sys.exit(0)

if __name__ == '__main__':
    Main()
